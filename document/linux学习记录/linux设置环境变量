# [(转载)设置环境变量永久生效和临时生效 export PS1](https://www.cnblogs.com/welkinok/p/5354621.html)

**source/etc/pro[file](http://www.linuxso.com/command/file.html)**是让/etc/profile文件修改后立即生效，

还有一种方法是**：. /etc/profile**

注意：.和/etc/profile有空格

**linux中source[命令](http://www.linuxso.com/command/)**

**source命令也称为“点命令”也就是一个符号（.）.source命令通常用于重新执行刚修改的初始或文件，使之立即生效，而不必注销并重新登录。**

 

一、Linux的变量种类
按变量的生存周期来划分，Linux变量可分为两类：
\1. 永久的：需要修改配置文件，变量永久生效。
\2. 临时的：使用[ex](http://www.linuxso.com/command/ex.html)port命令行声明即可，变量在关闭shell时失效。
二、设置变量的三种方法
\1. 在/etc/profile文件中添加变量【对所有用户生效（永久的）】
用VI在文件/etc/profile文件中增加变量，该变量将会对Linux下所有用户有效，并且是“永久的”。
例如：编辑/etc/profile文件，添加CLASSPATH变量
\# vi /etc/profile
[export](http://www.linuxso.com/command/export.html) CLASSPATH=./JAVA_HOME/lib;$JAVA_HOME/jre/lib
注：修改文件后要想马上生效还要运行# source /etc/profile不然只能在下次重进此用户时生效。
\2. 在用户目录下的.bash_profile文件中增加变量【对单一用户生效（永久的）】
用VI在用户目录下的.bash_profile文件中增加变量，改变量仅会对当前用户有效，并且是“永久的”。
例如：编辑guok用户目录（/home/guok）下的.bash_profile
$ vi /home/guok/.bash.profile
添加如下内容：
export CLASSPATH=./JAVA_HOME/lib;$JAVA_HOME/jre/lib
注：修改文件后要想马上生效还要运行$ source /home/guok/.bash_profile不然只能在下次重进此用户时生效。
\3. 直接运行export命令定义变量【只对当前shell（BASH）有效（临时的）】
在shell的命令行下直接使用[export变量名=变量值]定义变量，该变量只在当前的shell（BASH）或其子shell（BASH）下是有效的，shell关闭了，变量也就失效了，再打开新shell时就没有这个变量，需要使用的话还需要重新定义。 三、另外

 

 

 

1.使用readonly命令设置只读变量，如果使用了readonly命令的话，变量就不可以被修改或清除了。

2.使用un[set](http://www.linuxso.com/command/set.html)命令来清除环境变量 $ [unset](http://www.linuxso.com/command/unset.html) TEMP_KEVIN #删除环境变量TEMP_KEVIN

 

\~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 

**用法： source filename 或. filename**

**附：source命令除了上述的用途之外，还有一个用途。**

在对编译系统核心时常常需要输入一长串的命令，如：

make mrproper

make menuconfig

make dep

make clean

make bzImage

…………

如果把这些命令做成一个文件，让它自动顺序执行，对于需要多次反复编译系统核心的用户来说会很方便，而用source命令就可以做到这一点，它的作用就是把一个文件的内容当成shell来执行，先在linux的源代码目录下（如/usr/src/linux-2.4.20）建立一个文件，如make_command，在其中输入一下内容：

make mrproper &&

make menuconfig &&

make dep &&

make clean &&

make bzImage &&

make mo[du](http://www.linuxso.com/command/du.html)les &&

make modules_install &&

[cp](http://www.linuxso.com/command/cp.html) arch/i386/boot/bzImage /boot/vmlinuz_new &&

cp System.map /boot &&

vi /etc/[lilo](http://www.linuxso.com/command/lilo.html).conf &&

lilo -v

文件建立好之后，每次编译核心的时候，只需要在/usr/src/linux-2.4.20下输入：

source make_command

即可，如果你用的不是lilo来引导系统，可以把最后两行去掉，配置自己的引导程序来引导内核。

顺便补充一点，&&命令表示顺序执行由它连接的命令，但是只有它之前的命令成功执行完成了之后才可以继续执行它后面的命令。